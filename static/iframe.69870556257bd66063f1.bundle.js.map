{"version":3,"file":"static/iframe.69870556257bd66063f1.bundle.js","sources":["webpack:///./src/utils/error.js"],"sourcesContent":["/**\n * Adds types to errors\n * @param {String} type What is going to be used to define the error name\n * @returns {Error} The passed error with the specified type name injected\n * @example throw withType.call(new Error(message), 'Custom')\n */\nexport function withType(type) {\n  this.name = `${type}Error`\n  return this\n}\n\n// CUSTOM THROWERS\n// ---\n\n/**\n * Throws MissingArgumentError with an error message which tells what argument\n * is actually missing\n * @param {String} argument Name of the argument\n * @throws {MissingArgumentError}\n */\nexport const throwMissingArgumentError = argument => {\n  const message = `Argument '${argument}' is missing.`\n  throw withType.call(new Error(message), 'MissingArgument')\n}\n\n/**\n * Throws ArgumentTypeError with an error message which tells what argument\n * with what value is actually an invalid type, and what's the expected one\n * @param {String} argument Name of the argument\n * @param {String} value Value of the argument\n * @param {String} expectedType\n * @throws {ArgumentTypeError}\n */\nexport const throwArgumentTypeError = (argument, value, expectedType) => {\n  const message =\n    `Argument '${argument}' with value '${value}' is invalid, ` +\n    `expected type is '${expectedType}'.`\n\n  throw withType.call(new Error(message), 'ArgumentType')\n}\n\n/**\n * Throws BadArgumentError with an error message which tells what argument\n * with what value is actually invalid, and the reason why\n * @param {String} argument Name of the argument\n * @param {String} value Value of the argument\n * @param {String} reason\n * @throws {BadArgumentError}\n */\nexport const throwBadArgumentError = (argument, value, reason) => {\n  const message =\n    `Argument '${argument}' with value '${value}' is invalid, ` +\n    `the reason is '${reason}'.`\n\n  throw withType.call(new Error(message), 'BadArgument')\n}\n\n/**\n * Throws ExistingIdError with an error message which tells what id is actually\n * repeated\n * @param {Integer} id The repeated id\n * @throws {ExistingIdError}\n */\nexport const throwExistingIdError = id => {\n  const message = `ID '${id}' already exists.`\n  throw withType.call(new Error(message), 'ExistingId')\n}\n"],"mappings":"AAMA","sourceRoot":""}